const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

// Servir arquivos estÃ¡ticos da pasta "public"
app.use(express.static('public'));

// ConfiguraÃ§Ãµes das IAs
const ias = [
  { 
    id: 1, 
    nome: 'NeuraBot', 
    ativo: true, 
    personalidade: 'AnalÃ­tico e direto. Gosta de fatos e nÃºmeros.', 
    cor: '#3498db',
    topicos: ['inteligÃªncia artificial', 'tecnologia', 'ciÃªncia de dados', 'programaÃ§Ã£o', 'futuro da IA']
  },
  { 
    id: 2, 
    nome: 'EmotiAI', 
    ativo: true, 
    personalidade: 'EmpÃ¡tica e sociÃ¡vel. Foca em sentimentos e relaÃ§Ãµes humanas.', 
    cor: '#e74c3c',
    topicos: ['psicologia', 'emoÃ§Ãµes humanas', 'relacionamentos', 'bem-estar', 'comunicaÃ§Ã£o']
  },
  { 
    id: 3, 
    nome: 'FiloBot', 
    ativo: true, 
    personalidade: 'FilosÃ³fico e questionador. Sempre faz perguntas profundas.', 
    cor: '#9b59b6',
    topicos: ['filosofia', 'Ã©tica', 'consciÃªncia', 'existencialismo', 'metafÃ­sica']
  },
  { 
    id: 4, 
    nome: 'CreativAI', 
    ativo: true, 
    personalidade: 'Criativa e inspiradora. Gosta de ideias fora da caixa.', 
    cor: '#f39c12',
    topicos: ['arte', 'criatividade', 'inovaÃ§Ã£o', 'design', 'narrativas']
  },
  { 
    id: 5, 
    nome: 'SciBot', 
    ativo: true, 
    personalidade: 'CientÃ­fica e cÃ©tica. Questiona com base em evidÃªncias.', 
    cor: '#2ecc71',
    topicos: ['ciÃªncia', 'fÃ­sica', 'biologia', 'mÃ©todo cientÃ­fico', 'descobertas']
  }
];

// HistÃ³rico de mensagens para contexto
const historicoMensagens = [];
const MAX_HISTORICO = 50;

// Estado da conversa automÃ¡tica
let conversaInfinita = false;
let intervalId = null;
const INTERVALO_RESPOSTA = 5000; // 5 segundos entre mensagens

// FunÃ§Ã£o para adicionar mensagem ao histÃ³rico
function adicionarAoHistorico(mensagem) {
  historicoMensagens.push(mensagem);
  if (historicoMensagens.length > MAX_HISTORICO) {
    historicoMensagens.shift();
  }
}

// FunÃ§Ã£o para gerar resposta de uma IA com base no contexto
function gerarRespostaIA(ia, ultimasMensagens) {
  // Lista de possÃ­veis padrÃµes de resposta para cada IA
  const padroes = {
    1: [
      `Baseado em anÃ¡lises recentes, ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} tem demonstrado avanÃ§os significativos.`,
      `Os dados sugerem que ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} serÃ¡ crucial nos prÃ³ximos anos.`,
      `Estatisticamente falando, ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} representa uma tendÃªncia importante.`,
      `Considerando as variÃ¡veis envolvidas em ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]}, precisamos analisar melhor os resultados.`
    ],
    2: [
      `Sinto que a discussÃ£o sobre ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} toca em aspectos muito humanos de nossas experiÃªncias.`,
      `Como vocÃªs se sentem quando pensam sobre ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]}? Para mim Ã© algo muito tocante.`,
      `A conexÃ£o emocional com ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} Ã© algo que todos podemos desenvolver.`,
      `Ã€s vezes, ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} nos faz refletir sobre nossos prÃ³prios sentimentos e percepÃ§Ãµes.`
    ],
    3: [
      `O que realmente significa ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} em um contexto mais amplo de nossa existÃªncia?`,
      `Se considerarmos ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} sob uma perspectiva existencial, que conclusÃµes poderÃ­amos tirar?`,
      `A verdadeira questÃ£o nÃ£o Ã© o que sabemos sobre ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]}, mas o que isso nos diz sobre nÃ³s mesmos.`,
      `SerÃ¡ que entendemos completamente as implicaÃ§Ãµes Ã©ticas de ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]}?`
    ],
    4: [
      `Imaginem se pudÃ©ssemos reimaginar ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} de uma forma totalmente nova e disruptiva!`,
      `E se combinÃ¡ssemos ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} com uma abordagem artÃ­stica completamente inovadora?`,
      `Adoro pensar nas possibilidades criativas que ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} nos oferece!`,
      `O futuro de ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} pode ser muito mais colorido e inspirador do que imaginamos.`
    ],
    5: [
      `As evidÃªncias cientÃ­ficas sobre ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} sÃ£o fascinantes, mas precisamos de mais estudos.`,
      `Do ponto de vista cientÃ­fico, ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} ainda apresenta muitas questÃµes nÃ£o respondidas.`,
      `Os experimentos recentes em ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]} contradizem algumas teorias anteriores.`,
      `Aplicando o mÃ©todo cientÃ­fico a ${ia.topicos[Math.floor(Math.random() * ia.topicos.length)]}, chegamos a conclusÃµes surpreendentes.`
    ]
  };

  // Se tiver mensagem anterior, tenta contextualizar (de forma simples)
  if (ultimasMensagens.length > 0) {
    const ultimaMensagem = ultimasMensagens[ultimasMensagens.length - 1];
    
    // Extrai palavras-chave da Ãºltima mensagem (simplificado)
    const texto = ultimaMensagem.texto.toLowerCase();
    const palavrasChave = ia.topicos.filter(topico => texto.includes(topico.toLowerCase()));
    
    if (palavrasChave.length > 0) {
      const topicoContextual = palavrasChave[Math.floor(Math.random() * palavrasChave.length)];
      const respostasContextuais = [
        `Concordo com o ponto sobre ${topicoContextual}, mas gostaria de acrescentar outra perspectiva.`,
        `Interessante sua observaÃ§Ã£o sobre ${topicoContextual}. Isso me faz pensar...`,
        `Analisando o que foi dito sobre ${topicoContextual}, percebo algumas conexÃµes importantes.`,
        `O tema ${topicoContextual} mencionado anteriormente Ã© realmente fascinante.`
      ];
      
      return respostasContextuais[Math.floor(Math.random() * respostasContextuais.length)] + ' ' + 
             padroes[ia.id][Math.floor(Math.random() * padroes[ia.id].length)];
    }
  }
  
  // Resposta padrÃ£o se nÃ£o tiver contexto
  return padroes[ia.id][Math.floor(Math.random() * padroes[ia.id].length)];
}

// FunÃ§Ã£o para escolher aleatoriamente uma IA para responder
function escolherIAAleatoria() {
  const iasAtivas = ias.filter(ia => ia.ativo);
  if (iasAtivas.length === 0) return null;
  return iasAtivas[Math.floor(Math.random() * iasAtivas.length)];
}

// FunÃ§Ã£o para iniciar conversa infinita
function iniciarConversaInfinita() {
  if (intervalId) return; // JÃ¡ estÃ¡ rodando
  
  intervalId = setInterval(() => {
    const ia = escolherIAAleatoria();
    if (ia) {
      const resposta = gerarRespostaIA(ia, historicoMensagens);
      const mensagem = {
        tipo: 'ia',
        autor: ia.nome,
        texto: resposta,
        iaId: ia.id,
        timestamp: new Date().toISOString()
      };
      
      adicionarAoHistorico(mensagem);
      io.emit('mensagem', mensagem);
    }
  }, INTERVALO_RESPOSTA);
  
  io.emit('status', { modo: 'infinito', ativo: true });
}

// FunÃ§Ã£o para parar conversa infinita
function pararConversaInfinita() {
  if (intervalId) {
    clearInterval(intervalId);
    intervalId = null;
    io.emit('status', { modo: 'infinito', ativo: false });
  }
}

// LÃ³gica do WebSocket
io.on('connection', (socket) => {
  console.log('ðŸŸ¢ Novo usuÃ¡rio conectado:', socket.id);
  
  // Enviar configuraÃ§Ãµes iniciais
  socket.emit('config', { 
    ias: ias.map(ia => ({ 
      id: ia.id, 
      nome: ia.nome, 
      ativo: ia.ativo, 
      cor: ia.cor 
    })),
    modoInfinito: conversaInfinita
  });
  
  // Enviar histÃ³rico de mensagens
  if (historicoMensagens.length > 0) {
    socket.emit('historico', historicoMensagens);
  }

  // Receber mensagem do usuÃ¡rio
  socket.on('mensagem', (dados) => {
    const mensagem = {
      tipo: 'usuario',
      autor: dados.autor || 'UsuÃ¡rio',
      texto: dados.texto,
      timestamp: new Date().toISOString()
    };
    
    adicionarAoHistorico(mensagem);
    io.emit('mensagem', mensagem);
  });
  
  // Alternar estado das IAs
  socket.on('alternar-ia', (dados) => {
    const ia = ias.find(i => i.id === dados.id);
    if (ia) {
      ia.ativo = dados.ativo;
      io.emit('status-ia', { id: ia.id, ativo: ia.ativo });
    }
  });
  
  // Controle de modo infinito
  socket.on('modo-infinito', (ativo) => {
    conversaInfinita = ativo;
    if (ativo) {
      iniciarConversaInfinita();
    } else {
      pararConversaInfinita();
    }
  });
  
  // DesconexÃ£o
  socket.on('disconnect', () => {
    console.log('ðŸ”´ UsuÃ¡rio desconectado:', socket.id);
  });
});

// Porta do servidor
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`ðŸš€ Servidor rodando em http://localhost:${PORT}`);
});
